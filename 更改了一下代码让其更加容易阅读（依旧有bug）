#include <stdio.h>
#include <math.h>
#include <ctype.h>
#define 判断是否为小写字母 islower//是则返回非 0 值，否则返回 0
#define 判断是否为大写字母 isupper//是则返回非 0 值，否则返回 0
#define 乘方函数 pow//pow(x,y) 返回 x 的 y 次幂
int 判断字母的位置(char X)//判断字母的位置
{
    int Y = 0;
    switch (X)
    {
    case 'A':Y = 1; break;
    case 'a':Y = 1; break;
    case 'B':Y = 2; break;
    case 'b':Y = 2; break;
    case 'C':Y = 3; break;
    case 'c':Y = 3; break;
    case 'D':Y = 4; break;
    case 'd':Y = 4; break;
    case 'E':Y = 5; break;
    case 'e':Y = 5; break;
    case 'F':Y = 6; break;
    case 'f':Y = 6; break;
    case 'G':Y = 7; break;
    case 'g':Y = 7; break;
    case 'H':Y = 8; break;
    case 'h':Y = 8; break;
    case 'I':Y = 9; break;
    case 'i':Y = 9; break;
    case 'J':Y = 10; break;
    case 'j':Y = 10; break;
    case 'K':Y = 11; break;
    case 'k':Y = 11; break;
    case 'L':Y = 12; break;
    case 'l':Y = 12; break;
    case 'M':Y = 13; break;
    case 'm':Y = 13; break;
    case 'N':Y = 14; break;
    case 'n':Y = 14; break;
    case 'O':Y = 15; break;
    case 'o':Y = 15; break;
    case 'P':Y = 16; break;
    case 'p':Y = 16; break;
    case 'Q':Y = 17; break;
    case 'q':Y = 17; break;
    case 'R':Y = 18; break;
    case 'r':Y = 18; break;
    case 'S':Y = 19; break;
    case 's':Y = 19; break;
    case 'T':Y = 20; break;
    case 't':Y = 20; break;
    case 'U':Y = 21; break;
    case 'u':Y = 21; break;
    case 'V':Y = 22; break;
    case 'v':Y = 22; break;
    case 'W':Y = 23; break;
    case 'w':Y = 23; break;
    case 'X':Y = 24; break;
    case 'x':Y = 24; break;
    case 'Y':Y = 25; break;
    case 'y':Y = 25; break;
    case 'Z':Y = 26; break;
    case 'z':Y = 26; break;
    }
    return Y;
}
void 判断输入的成分(char a[][10])//判断输入的成分
{
    int b = 0;
    while (a[0][b] != '\0')
    {
        if ((a[0][b] >= 'A' && a[0][b] <= 'Z') || (a[0][b] >= 'a' && a[0][b] <= 'z'))
        {
            a[1][0]++;//字母
        }
        else if (a[0][b] >= '0' && a[0][b] <= '9')
        {
            a[1][1]++;//数字
        }
        else
        {
            a[1][2]++;//其他
        }
        b++;
    }
}
int main()
{
    char 输入的成分[2][10] = { 0, 0 };//输入的成分
    /*
     数字和字母的混合
     字母的数量，数字的数量，其他的数量
     */
    int 数字的位置 = 0;//数字的位置
    char 输出数字的数组[20] = { 0 };//输出数字的数组
    int 最终的数字输出数组[20] = { 0 };//最终的数字输出数组
    int 判断数字的循环 = 0;//判断数字的循环
    int 判断字母的循环_1 = 0;//判断字母的循环_1
    int 判断字母的循环_2 = 0;//判断字母的循环_2
    int 转化进制用的数 = 0;//转化进制用的数
    char 输出字母的数组[20] = { 0 };//输出字母的数组
    gets_s(输入的成分[0], 10);
    判断输入的成分(输入的成分);
    printf("你所输入的字符串中：\n");
    int 字母的数量 = (int)输入的成分[1][0];//字母的数量
    printf("    字母的数量：%d \n", 字母的数量);
    int 数字的数量 = (int)输入的成分[1][1];//数字的数量
    printf("    数字的数量：%d \n", 数字的数量);
    if (输入的成分[1][2] != 0)
    {
        printf("这程序不是用来给你玩的！\n");
    }
    else
    {
        for (int b = 0; 输入的成分[0][b] != '\0'; b++)
        {
            if ((输入的成分[0][b] >= 'A' && 输入的成分[0][b] <= 'Z') || (输入的成分[0][b] >= 'a' && 输入的成分[0][b] <= 'z'))//字母
            {
                判断字母的循环_1 = b;
                while (判断是否为小写字母(输入的成分[0][判断字母的循环_1]) == 0 || 判断是否为大写字母(输入的成分[0][判断字母的循环_1]) == 0)//循环到不是字母
                {
                    判断字母的循环_1++;
                    转化进制用的数++;
                }
                if (判断字母的循环_2 == 0)
                {
                    输出字母的数组[b] = 判断字母的位置(输入的成分[0][b]) * (int)乘方函数(26, 转化进制用的数 - 1);
                    判断字母的循环_2 = 1;
                }
                else
                {
                    输出字母的数组[b] = 输出字母的数组[b] + 判断字母的位置(输入的成分[0][b]) * (int)乘方函数(26, 转化进制用的数 - 1);
                }
                转化进制用的数 = 0;
                数字的位置++;
                判断数字的循环 = 0;
            }
            else if (输入的成分[0][b]>= '0' && 输入的成分[0][b] <= '9')//数字
            {
                if (判断数字的循环 == 0)
                {
                    输出数字的数组[数字的位置] = 输入的成分[0][b];
                    判断数字的循环 = 1;
                }
                else
                {
                    输出数字的数组[数字的位置] = 输出数字的数组[数字的位置] * 10 + 输入的成分[0][b];
                }
                判断字母的循环_2 = 0;
            }
            else
            {
                printf("出错！\n");
                数字的位置++;
                判断数字的循环 = 0;
                判断字母的循环_2 = 0;
            }
        }
        for (int a = 0; 输出数字的数组[a] != '\0'; a++)//char数组转化成int数组
        {
            最终的数字输出数组[a] = (int)输出数字的数组[a] - 48;
        }
        printf("    字母为：");
        for (int c = 0; 输出字母的数组[c] != '\0'; c++)
        {
            printf("%c",输出字母的数组[c]);
        }
        printf("\n");
        printf("    数字为：");
        for (int d = 0; 输出数字的数组[d] != '\0'; d++)
        {
            printf("%d", (int)输出数字的数组[d]);
        }
    }
    return 0;
}
